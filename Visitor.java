/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cms;

import static cms.Home.nowna;
import static cms.Medication.hour;
import static cms.function.CBox_function.CBox_function;
import static cms.function.CBox_function.CBox_function02;
import static cms.function.Loginfunction.user_ID;
import cms.function.SQLConnection;
import static cms.function.tbl_function.tbl_function;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Benjie
 */
public class Visitor extends javax.swing.JDialog {

    PreparedStatement pstmt = null;
    Connection conn = SQLConnection.ConnDB();
    ResultSet rs = null;
    String student = "100001";
    public Visitor() {
        initComponents();
        tbl_function(tbl_med);
        CBox_function(cmb_illname);
            
        refreshsuggestedmed(tbl_med);
    }
    
    public void refreshsuggestedmed(JTable hex1){
        
      try{
        
        String illname = cmb_illname.getSelectedItem().toString();  
        DefaultTableModel mod = (DefaultTableModel)hex1.getModel();
        mod.getDataVector().removeAllElements();
        hex1.repaint();
//        
//        String sql = "SELECT * FROM med_ill "
//                    + "INNER JOIN med_table "
//                    + "ON med_ill.med_id=med_table.med_id "
//                    + "INNER JOIN ill_table "
//                    + "ON med_ill.ill_id = ill_table.ill_id"
//                    + " INNER JOIN ill_category "
//                    + "ON ill_table.category_id = ill_category.category_id  "
//                    + "WHERE med_table.med_name NOT IN (SELECT allergy_cause FROM allergy_tbl WHERE id_no = '"+lbl_id.getText()+"')"
//                    + " AND med_ill.ill_id = (SELECT ill_table.ill_id "
//                    + "FROM ill_table WHERE ill_name='"+illname+"')"
//                    + " ORDER BY med_table.med_name";
        
        String sql = "SELECT * FROM med_ill a INNER JOIN med_table b ON a.med_id = b.med_id "
                + "INNER JOIN ill_table c ON a.ill_id = c.ill_id "
                + "INNER JOIN ill_category d ON c.category_id = d.category_id "
                + "INNER JOIN pivot_medicine e ON a.med_id = e.med_id "
                + "INNER JOIN generic f ON e.generic_id = f.generic_id "
                + "WHERE f.generic_desc NOT IN (SELECT allergy_cause FROM allergy_tbl WHERE id_no = '"+student+"') "
                + "AND b.med_name NOT IN (SELECT allergy_cause FROM allergy_tbl WHERE id_no = '"+student+"') "
                + "AND a.ill_id = (SELECT ill_table.ill_id FROM ill_table WHERE ill_name = '"+illname+"')"
                + " AND b.isActive = '1' "
                + "GROUP BY b.med_name "
                + "ORDER BY b.med_name";
        
            pstmt = conn.prepareStatement(sql);
            rs = pstmt.executeQuery();
            while (rs.next()){
                

                String mn = rs.getString("b.med_name");
                String mr = rs.getString("b.med_remain");
                String xy = rs.getString("d.category_name");
                
                txt_category.setText(xy);
                if (txt_category.getText().equalsIgnoreCase("Contagious")){
                    txt_category.setForeground(new Color(243, 156, 18));
                }else if (txt_category.getText().equalsIgnoreCase("Emergency")){
                    txt_category.setForeground(Color.red);
                }else if (txt_category.getText().equalsIgnoreCase("Severe")){  
                    txt_category.setForeground(new Color(211, 84, 0));
                }else{
                    txt_category.setForeground(new Color(127, 140, 141));
                }
                
                
                Object karga [] = {mn,mr};
                mod.addRow(karga);
                hex1.setModel(mod);
            }

        }catch (Exception e){
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_med = new javax.swing.JTable();
        btn_med = new javax.swing.JButton();
        tgl_bedrest = new javax.swing.JToggleButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        cmb_illname = new javax.swing.JComboBox();
        txt_category = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel45 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setUndecorated(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(10, 61, 115)));

        tbl_med.setAutoCreateRowSorter(true);
        tbl_med.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tbl_med.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medicine Name", "Remaining Qty"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_med.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tbl_med.setIntercellSpacing(new java.awt.Dimension(0, 0));
        tbl_med.setRowHeight(27);
        tbl_med.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbl_med.setShowHorizontalLines(false);
        tbl_med.setShowVerticalLines(false);
        tbl_med.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tbl_med);

        btn_med.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        btn_med.setForeground(new java.awt.Color(10, 61, 115));
        btn_med.setText("Proceed");
        btn_med.setBorderPainted(false);
        btn_med.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_medActionPerformed(evt);
            }
        });

        tgl_bedrest.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tgl_bedrest.setForeground(new java.awt.Color(10, 61, 115));
        tgl_bedrest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/png/add139_w (1).png"))); // NOI18N
        tgl_bedrest.setText("Bedrest");
        tgl_bedrest.setBorderPainted(false);
        tgl_bedrest.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tgl_bedrest.setFocusPainted(false);
        tgl_bedrest.setFocusable(false);
        tgl_bedrest.setIconTextGap(14);
        tgl_bedrest.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/png/check52.png"))); // NOI18N
        tgl_bedrest.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/png/check52.png"))); // NOI18N
        tgl_bedrest.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tgl_bedrestItemStateChanged(evt);
            }
        });
        tgl_bedrest.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tgl_bedrestMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tgl_bedrestMousePressed(evt);
            }
        });
        tgl_bedrest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tgl_bedrestActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(10, 61, 115));
        jLabel12.setText("Suggested Medicines");

        jLabel34.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(70, 70, 70));
        jLabel34.setText("Name :");

        cmb_illname.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cmb_illname.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        cmb_illname.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_illnameItemStateChanged(evt);
            }
        });
        cmb_illname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_illnameActionPerformed(evt);
            }
        });

        txt_category.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        txt_category.setForeground(new java.awt.Color(120, 120, 120));
        txt_category.setText("Category");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(10, 61, 115));
        jLabel11.setText("Select Illness");

        jPanel2.setBackground(new java.awt.Color(10, 61, 115));
        jPanel2.setPreferredSize(new java.awt.Dimension(1299, 96));

        jLabel45.setFont(new java.awt.Font("Arcon", 0, 30)); // NOI18N
        jLabel45.setForeground(new java.awt.Color(255, 255, 255));
        jLabel45.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel45.setText("Visitor Medication");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/home/logo.png"))); // NOI18N

        jButton2.setFont(new java.awt.Font("Segoe UI Emoji", 1, 16)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 0, 0));
        jButton2.setText("X");
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setFocusPainted(false);
        jButton2.setFocusable(false);
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton2MouseExited(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 1088, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 31, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel45, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1405, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(tgl_bedrest, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_med, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmb_illname, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_category, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(cmb_illname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_category))
                .addGap(39, 39, 39)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tgl_bedrest, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_med))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_medActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_medActionPerformed
        String cat = "1";
        String patch = "1";
        try{
            

            String illname = cmb_illname.getSelectedItem().toString();

            String id_ng_koya_mo = "";

            //            String ill_id = "SELECT ill_id FROM ill_table WHERE ill_name = '"+illname+"'";

            int row = tbl_med.getSelectedRow();

            //            String med_id = "SELECT med_id FROM med_table WHERE med_name = '"+medname+"'";

            //            ////// CHECK KUNG MAY PININDOT SA MEDICINE TABLE //////
            //            if (!tbl_med.isRowSelected(row)){
                //                medname = "";
                //            }else{
                //                medname = tbl_med.getValueAt(row, 0).toString();
                //            }

            String b_result = "";
            String hello = null;

            ////// Check if bedrest is Toggled ///////
            if (tgl_bedrest.isSelected()){
                b_result = "1";
                hello = hour.toString();

            }else{
                b_result = "0";
            }

            if (!tbl_med.isRowSelected(row)){
                ////// IF BEDREST & NO MEDICINE /////

                //// INSTANTATION

                if (tgl_bedrest.isSelected()){
                    int decide = JOptionPane.showConfirmDialog(null, "Provide bedrest without medicine?",null,JOptionPane.YES_NO_OPTION);
                    ///// KUNG GUSTO HUMIGA NG WALANG GAMOT /////
                    if (decide==0){

                        
                            ///// bilangin ang bed na na-okupa /////
                            String count = "SELECT COUNT(id_no) as 'A' FROM med_dspnsd WHERE inTime is not null and outTime is null;";

                            pstmt = conn.prepareStatement(count);
                            rs = pstmt.executeQuery(count);
                            while(rs.next()){
                                int get = rs.getInt("A");
                                if (get==4){
                                    JOptionPane.showMessageDialog(null, "All Beds are currently occupied");

                                }else{

                                    String query = "INSERT INTO med_dspnsd SET"
                                    + " med_id = null,"
                                    + " ill_id = (SELECT ill_id FROM ill_table WHERE ill_name = '"+illname+"'),"
                                    + " bedrest = '"+b_result+"',"
                                    + " id_no = '"+student+"',"
                                    + " date_given = '"+nowna+"',"
                                    + " time = '"+hour+"',"
                                    + " user_ID = '"+user_ID+"',"
                                    + " inTime = '"+hello+"',"
                                    + " outTime = null;";

                                    pstmt = conn.prepareStatement(query);
                                    pstmt.executeUpdate();

                                    JOptionPane.showMessageDialog(null, "Added Transaction");

                                }

                            }

                        

                    }else{ ///// EH AYAW HUMIGA NG WALANG GAMOT

                        JOptionPane.showMessageDialog(null,"Please Select Medicine", null, JOptionPane.WARNING_MESSAGE);
                    }

                }

                //// MAY GAMOT NA PINILI
            }else{
                ////// INSTANTIATION /////
                String medname = tbl_med.getValueAt(row, 0).toString();

                String med_id = "SELECT med_id, med_category FROM med_table WHERE med_name='"+medname+"'";
                pstmt = conn.prepareStatement(med_id);
                rs = pstmt.executeQuery(med_id);

                while (rs.next()){

                    id_ng_koya_mo = rs.getString("med_id");
                    cat = rs.getString("med_category");

                    if (cat.equals("3")){
                        SpinnerNumberModel sModel = new SpinnerNumberModel(0, 0, 20, 1);
                        JSpinner spinner = new JSpinner(sModel);
                        int option = JOptionPane.showOptionDialog(null, spinner, "Enter valid number", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
                        if (option == JOptionPane.CANCEL_OPTION){
                            // user hit cancel
                        }else if (option == JOptionPane.OK_OPTION){
                            patch = spinner.getValue().toString();
                        }
                    }
                }

                 //////KUNG HINDI PA SIYA NAKATATLO
                        int dialogResult;

                        ///// TANUNGIN KUNG MAY BEDREST O WALA

                        if (tgl_bedrest.isSelected()){ // KAPAG MAY BEDREST
                            //                                    String bed = " bedrest = '1', inTime = '"+hour+"'";
                            dialogResult = JOptionPane.showConfirmDialog (null, "Dispense "+medname+ " with Bedrest. Proceed?","Warning",JOptionPane.YES_NO_OPTION);

                        }else{ // ETO WALANG BEDREST

                            dialogResult = JOptionPane.showConfirmDialog (null, "Dispense "+medname+ ". Proceed?","Warning",JOptionPane.YES_NO_OPTION);

                        }

                        if (dialogResult==0){
                            if (row == -1){

                                JOptionPane.showMessageDialog(null, "Please Select Medicine");

                            }else{

                                //                                        String getCount = tbl_med.getModel().getValueAt(row, 1).toString();

                                String bilang = tbl_med.getModel().getValueAt(row, 1).toString();
                                ///// TIGNAN KUNG MAY BILANG /////////
                                if (bilang.equals("0")){
                                    JOptionPane.showMessageDialog(null, "This medicine is out of stock");

                                    //// E MAY BILANG NGA SYA //////////
                                }else{

                                    if (tgl_bedrest.isSelected()){

                                       

                                            ///// bilangin ang bed na na-okupa /////
                                            String count = "SELECT COUNT(id_no) as 'A' FROM med_dspnsd WHERE inTime is not null and outTime is null;";
                                            pstmt = conn.prepareStatement(count);
                                            rs = pstmt.executeQuery();

                                            while (rs.next()){
                                                int get = rs.getInt("A");
                                                if (get==4){
                                                    JOptionPane.showMessageDialog(null, "All Beds are currently occupied");
                                                }else{
                                                    ///// CHECK KUNG PATCH BA SIYA
                                                    String amen = "";
                                                    if (cat.equals("3")){
                                                        amen = ", amount = "+patch;
                                                    }

                                                    /////DITO KA NA MAG INSERT SA DATABASE
                                                    String query = "INSERT INTO med_dspnsd SET"
                                                    + " med_id = (SELECT med_id FROM med_table WHERE med_name = '"+medname+"'),"
                                                    + " ill_id = (SELECT ill_id FROM ill_table WHERE ill_name = '"+illname+"'),"
                                                    + " bedrest = '"+b_result+"',"
                                                    + " id_no = '"+student+"',"
                                                    + " date_given = '"+nowna+"',"
                                                    + " time = '"+hour+"',"
                                                    + " user_ID = '"+user_ID+"',"
                                                    + " inTime = '"+hello+"',"
                                                    + " outTime = null"
                                                    + " "+amen+"";

                                                    pstmt = conn.prepareStatement(query);
                                                    pstmt.executeUpdate();

                                                    String getqnty = "SELECT * FROM med_table WHERE med_id = (SELECT med_id FROM med_table WHERE med_name = '"+medname+"');";
                                                    pstmt = conn.prepareStatement(getqnty);
                                                    rs = pstmt.executeQuery();

                                                    if(rs.next()){
                                                        int amt = Integer.parseInt(patch);
                                                        String gago = rs.getString("med_remain");
                                                        System.out.println(gago);
                                                        int finalresult = Integer.parseInt(gago) - amt;
                                                        System.out.println(finalresult);

                                                        String addqnty = "UPDATE med_table SET"
                                                        +" med_remain  = '"+finalresult+"'"
                                                        + " WHERE med_id = '"+id_ng_koya_mo+"';";

                                                        pstmt = conn.prepareStatement(addqnty);
                                                        pstmt.executeUpdate();

                                                        JOptionPane.showMessageDialog(null, "Added Transaction");

                                                    }

                                                

                                            }

                                        }

                                    }else{
                                        String amen = "";
                                        if (cat.equals("3")){
                                            amen = ", amount = "+patch;
                                        }
                                        String sql = "INSERT INTO med_dspnsd SET"
                                        + " med_id = (SELECT med_id FROM med_table WHERE med_name = '"+medname+"')"
                                        + ", ill_id = (SELECT ill_id FROM ill_table WHERE ill_name = '"+illname+"')"
                                        + ", id_no='"+student+"'"
                                        + ", date_given='"+nowna+"'"
                                        + ", time='"+hour+"'"
                                        + ", user_ID='"+user_ID+"'"
                                        + ", inTime=null"
                                        + ", outTime=null"
                                        + " "+amen+"";

                                        pstmt = conn.prepareStatement(sql);
                                        pstmt.executeUpdate();

                                        String getqnty = "SELECT med_remain FROM med_table WHERE med_id = (SELECT med_id FROM med_table WHERE med_name = '"+medname+"');";
                                        pstmt = conn.prepareStatement(getqnty);
                                        rs = pstmt.executeQuery();
                                        while(rs.next()){
                                            int amt = Integer.parseInt(patch);
                                            int gago1 = rs.getInt("med_remain");
                                            System.out.println(gago1);
                                            int finalresult = (gago1)-amt;
                                            System.out.println(finalresult);

                                            String addqnty = "UPDATE med_table SET"
                                            +" med_remain  = '"+finalresult+"'"
                                            + " WHERE med_id = '"+id_ng_koya_mo+"';";

                                            pstmt = conn.prepareStatement(addqnty);
                                            pstmt.executeUpdate();

                                            JOptionPane.showMessageDialog(null, "Transaction Added");

                                        }

                                    }

                                    
                                }
                            }
                        }
                    
                }

            

        }catch(Exception e){
            e.printStackTrace();
        }

    }//GEN-LAST:event_btn_medActionPerformed

    private void tgl_bedrestItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tgl_bedrestItemStateChanged

    }//GEN-LAST:event_tgl_bedrestItemStateChanged

    private void tgl_bedrestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tgl_bedrestMouseClicked

    }//GEN-LAST:event_tgl_bedrestMouseClicked

    private void tgl_bedrestMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tgl_bedrestMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tgl_bedrestMousePressed

    private void tgl_bedrestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tgl_bedrestActionPerformed

    }//GEN-LAST:event_tgl_bedrestActionPerformed

    private void cmb_illnameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_illnameItemStateChanged
        //CBox_function(cmb_name);

        /*
        try{

            DefaultTableModel mod = (DefaultTableModel)med_tbl.getModel();
            mod.getDataVector().removeAllElements();
            med_tbl.repaint();

            String sql = "SELECT med_table.med_name, med_table.med_remain FROM med_ill "
            + "INNER JOIN med_table "
            + "ON med_ill.med_id=med_table.med_id "
            + "WHERE med_ill.ill_id = (SELECT ill_table.ill_id "
            + "FROM ill_table WHERE ill_name='"+xo+"')"
            + "ORDER BY med_table.med_name";
            pstmt = conn.prepareStatement(sql);
            rs = pstmt.executeQuery();
            while (rs.next()){
                String mn = rs.getString("med_table.med_name");
                String mr = rs.getString("med_table.med_remain");

                Object karga [] = {mn,mr};
                mod.addRow(karga);
                med_tbl.setModel(mod);
            }

        }catch (Exception e){
            e.printStackTrace();
        }*/

        refreshsuggestedmed(tbl_med);
    }//GEN-LAST:event_cmb_illnameItemStateChanged

    private void cmb_illnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_illnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_illnameActionPerformed

    private void jButton2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseEntered

    }//GEN-LAST:event_jButton2MouseEntered

    private void jButton2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseExited

    }//GEN-LAST:event_jButton2MouseExited

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int dialogresult = JOptionPane.showConfirmDialog(null, "Are you sure you want to close?", "Warning!", JOptionPane.YES_NO_OPTION);
        if (dialogresult==0){
            this.dispose();
            new Home().setVisible(true);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Visitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Visitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Visitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Visitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Visitor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_med;
    public javax.swing.JComboBox cmb_illname;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable tbl_med;
    private javax.swing.JToggleButton tgl_bedrest;
    private javax.swing.JLabel txt_category;
    // End of variables declaration//GEN-END:variables
}
